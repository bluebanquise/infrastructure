# EFI disk boot - auto find script
# Benoit Leveugle <benoit.leveugle@sphenisc.com>

echo " _________________"
echo "|# :           : #|"
echo "|  : Blue      :  |"
echo "|  :  Banquise :  |"
echo "|  :EFI - Grub2:  |"
echo "|  :___________:  |"
echo "|     _________   |"
echo "|    | __      |  |"
echo "|    ||  |     |  |"
echo "\____||__|_____|__|lc"
echo
echo " Loading modules..."
insmod part_gpt
insmod fat
insmod chain
insmod part_msdos
insmod ext2
echo

# From @JBE, https://stackoverflow.com/questions/67506022/create-a-grub-script-that-auto-detect-efi-systems-and-boot-first-one/74977789#74977789
echo " Searching presence of /EFI/BOOT/BOOTX64.EFI on physical disk..."
search --no-floppy --file --set=bootable_efi /EFI/BOOT/BOOTX64.EFI
if [ -n "${bootable_efi}" ]; then
  menuentry "EFI Bootable USB" --class unknown {
    set root="${bootable_efi}"
    chainloader /EFI/BOOT/BOOTX64.EFI
    boot
  }
fi

echo " Searching presence of grub.cfg on physical disk..."
echo "Scanning, first pass..."
for efi in (*,gpt*)/efi/*/grub.cfg (*,gpt*)/efi/*/*/grub.cfg (*,gpt*)/grub.cfg (*,gpt*)/*/grub.cfg ; do
                regexp --set=1:efi_device '^\((.*)\)/' "${efi}"
done
echo "Scanning, second pass..."
for efi in (*,gpt*)/efi/*/grub.cfg (*,gpt*)/efi/*/*/grub.cfg (*,gpt*)/grub.cfg (*,gpt*)/*/grub.cfg ; do
                regexp --set=1:efi_device '^\((.*)\)/' "${efi}"
                if [ -e "${efi}" ]; then
                    efi_found=true
                    echo " >> Found operating system! <<"
                    echo " Path: ${efi}"
                    echo " Booting in 5s..."
                    sleep --interruptible --verbose 5
                    configfile "${efi}"
                    boot
                fi
done

echo "No EFI known OS found. Fall back on shell."
sleep 2s
